<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!--
    ~
    ~ Copyright 2018 Symphony Communication Services, LLC.
    ~
    ~ Licensed to The Symphony Software Foundation (SSF) under one
    ~ or more contributor license agreements.  See the NOTICE file
    ~ distributed with this work for additional information
    ~ regarding copyright ownership.  The SSF licenses this file
    ~ to you under the Apache License, Version 2.0 (the
    ~ "License"); you may not use this file except in compliance
    ~ with the License.  You may obtain a copy of the License at
    ~
    ~   http://www.apache.org/licenses/LICENSE-2.0
    ~
    ~ Unless required by applicable law or agreed to in writing,
    ~ software distributed under the License is distributed on an
    ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    ~ KIND, either express or implied.  See the License for the
    ~ specific language governing permissions and limitations
    ~ under the License.
  -->

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.symphonyoss.s2.fugue</groupId>
    <artifactId>fugue-example</artifactId>
    <version>0.0.5</version>
  </parent>
  <artifactId>fugue-example-hello</artifactId>
  
  <build>

  <plugins>
     <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
          <images>
            <image>
              <name>${project.name}:${project.version}</name>
              <alias>${project.name}</alias>
              <build>
                <from>openjdk:latest</from>
                <assembly>
                  <descriptor>${project.basedir}/src/main/assembly/assemble.xml</descriptor>
                </assembly>
                <cmd>java -cp "maven/*" org.symphonyoss.s2.fugue.example.hello.HelloWorld</cmd>
              </build>
              <run>
                <ports>
                  <port>8080:8080</port>
                </ports>
              </run>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>docker:build</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
            <configuration>
              <showLogs>true</showLogs>
            </configuration>
          </execution>
        </executions>
      </plugin>
  </plugins>
</build>

</project>